import os
import time
import signal
import socket
import subprocess
from datetime import datetime, timedelta, timezone
from pybit.unified_trading import WebSocket, HTTP
import uuid
import logging
import threading
import requests
import json
from http.server import HTTPServer, BaseHTTPRequestHandler
from rsi_strategy import RSIStrategyBase
from config import USE_CUSTOM_RSI, USE_DUAL_RSI, USE_NEURAL_FILTER, NEURAL_CONFIDENCE_THRESHOLD

# === –õ–û–ì–ì–ï–† ===
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
    import logging.handlers
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
    os.makedirs(log_dir, exist_ok=True)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger("rsi-bot")
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    logger.handlers.clear()
    
    # Formatter
    formatter = logging.Formatter(
        '[%(asctime)s] %(levelname)s %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –†–æ—Ç–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª–æ–≤—ã–π handler (100MB, 10 —Ñ–∞–π–ª–æ–≤)
    file_handler = logging.handlers.RotatingFileHandler(
        os.path.join(log_dir, 'bybit_bot.log'),
        maxBytes=100*1024*1024,  # 100MB
        backupCount=10,
        encoding='utf-8'
    )
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if os.getenv('DEVELOPMENT', 'false').lower() == 'true':
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
    error_handler = logging.handlers.RotatingFileHandler(
        os.path.join(log_dir, 'bybit_bot_errors.log'),
        maxBytes=50*1024*1024,  # 50MB
        backupCount=5,
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    logger.addHandler(error_handler)
    
    return logger

logger = setup_logging()

# === HEALTH CHECK SERVER ===
class HealthCheckHandler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        pass
    
    def do_GET(self):
        if self.path == '/health':
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
                if global_bot_instance and hasattr(global_bot_instance, 'ws') and global_bot_instance.ws:
                    status = {
                        'status': 'healthy',
                        'timestamp': datetime.now(timezone.utc).isoformat(),
                        'connected': global_bot_instance.is_connected,
                        'last_tick': global_bot_instance.last_tick_time.isoformat() if global_bot_instance.last_tick_time else None,
                        'reconnect_attempts': global_bot_instance.reconnect_attempts,
                        'equity': global_bot_instance.strategy.equity,
                        'trades_count': len(global_bot_instance.strategy.trades)
                    }
                    self.send_response(200)
                else:
                    status = {
                        'status': 'unhealthy',
                        'timestamp': datetime.now(timezone.utc).isoformat(),
                        'error': 'Bot not initialized'
                    }
                    self.send_response(503)
                
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(status, indent=2).encode())
                
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                error_response = {
                    'status': 'error',
                    'timestamp': datetime.now(timezone.utc).isoformat(),
                    'error': str(e)
                }
                self.wfile.write(json.dumps(error_response, indent=2).encode())
        else:
            self.send_response(404)
            self.end_headers()

def start_health_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check"""
    try:
        server = HTTPServer(('0.0.0.0', 8080), HealthCheckHandler)
        server.timeout = 1  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã
        
        def serve_forever():
            while True:
                server.handle_request()
        
        health_thread = threading.Thread(target=serve_forever, daemon=True)
        health_thread.start()
        logger.info("üè• Health check server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        return server
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å health check server: {e}")
        return None

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_KEY  = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
SYMBOL = 'BTCUSDT'
POSITION_SIZE = 0.01  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.01 BTC)
RSI_PERIOD = 14
RSI_BUY = 30
RSI_SELL = 70
CANDLE_MINUTES = 5
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º testnet –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TESTNET = os.environ.get('TESTNET', '1') == '1'

# === –ù–ê–°–¢–†–û–ô–ö–ò TELEGRAM ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TELEGRAM_ENABLED = TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID

# === –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –î–ê–ú–ü–ê ===
global_bot_instance = None

def create_debug_dump(bot_instance, signal_name="MANUAL"):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–±–∞–≥-–¥–∞–º–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    timestamp = datetime.now(timezone.utc)
    filename = f"debug_dump_{timestamp.strftime('%Y%m%d_%H%M%S')}.json"
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞
        dump_data = {
            "timestamp": timestamp.isoformat(),
            "signal_name": signal_name,
            "bot_state": {
                "symbol": bot_instance.symbol,
                "position": bot_instance.position,
                "last_signal": bot_instance.last_signal,
                "position_size": bot_instance.position_size,
                "last_rsi": bot_instance.last_rsi,
                "is_connected": bot_instance.is_connected,
                "last_tick_time": bot_instance.last_tick_time
            },
            "strategy_state": {
                "position": bot_instance.strategy.position,
                "rsi_period": bot_instance.strategy.rsi_period,
                "rsi_buy": bot_instance.strategy.rsi_buy,
                "rsi_sell": bot_instance.strategy.rsi_sell,
                "bb_period": bot_instance.strategy.bb_period,
                "equity": bot_instance.strategy.equity,
                "total_candles": len(bot_instance.strategy.candles),
                "total_rsi_values": len(bot_instance.strategy.rsi_values),
                "total_trades": len(bot_instance.strategy.trades)
            },
            "recent_candles": [],
            "rsi_values": [],
            "bb_values": [],
            "entry_points": [],
            "exit_points": [],
            "equity_curve": []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π
        recent_candles = bot_instance.strategy.candles[-50:] if len(bot_instance.strategy.candles) > 50 else bot_instance.strategy.candles
        for candle in recent_candles:
            dump_data["recent_candles"].append({
                "start_time": candle.start_time.isoformat(),
                "open": candle.open,
                "high": candle.high,
                "low": candle.low,
                "close": candle.close,
                "volume": candle.volume
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if bot_instance.strategy.current_candle:
            current_candle = {
                "start_time": bot_instance.strategy.current_candle.start_time.isoformat(),
                "open": bot_instance.strategy.current_candle.open,
                "high": bot_instance.strategy.current_candle.high,
                "low": bot_instance.strategy.current_candle.low,
                "close": bot_instance.strategy.current_candle.close,
                "volume": bot_instance.strategy.current_candle.volume,
                "is_current": True
            }
            dump_data["current_candle"] = current_candle
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–Ω–∞—á–µ–Ω–∏–π RSI
        dump_data["rsi_values"] = bot_instance.strategy.rsi_values[-100:] if len(bot_instance.strategy.rsi_values) > 100 else bot_instance.strategy.rsi_values
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–Ω–∞—á–µ–Ω–∏–π BB
        recent_bb = bot_instance.strategy.bb_values[-100:] if len(bot_instance.strategy.bb_values) > 100 else bot_instance.strategy.bb_values
        for bb in recent_bb:
            if bb[0] is not None:  # ma, upper, lower
                dump_data["bb_values"].append({
                    "ma": bb[0],
                    "upper": bb[1], 
                    "lower": bb[2]
                })
            else:
                dump_data["bb_values"].append(None)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
        for entry_time, entry_price in bot_instance.strategy.entry_points:
            dump_data["entry_points"].append({
                "time": entry_time.isoformat(),
                "price": entry_price
            })
        
        for exit_time, exit_price in bot_instance.strategy.exit_points:
            dump_data["exit_points"].append({
                "time": exit_time.isoformat(), 
                "price": exit_price
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–≤—É—é —ç–∫–≤–∏—Ç–∏
        dump_data["equity_curve"] = bot_instance.strategy.equity_curve[-200:] if len(bot_instance.strategy.equity_curve) > 200 else bot_instance.strategy.equity_curve
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π RSI –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if len(bot_instance.strategy.candles) > 0:
            closes = [c.close for c in bot_instance.strategy.candles]
            if bot_instance.strategy.current_candle:
                closes.append(bot_instance.strategy.current_candle.close)
            
            from rsi_strategy import compute_rsi
            manual_rsi = compute_rsi(closes, bot_instance.strategy.rsi_period)
            dump_data["manual_rsi_check"] = {
                "calculated_rsi": manual_rsi,
                "last_strategy_rsi": bot_instance.strategy.rsi_values[-1] if bot_instance.strategy.rsi_values else None,
                "closes_used": closes[-15:],  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è
                "total_closes": len(closes)
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(dump_data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üîç [DEBUG DUMP] –°–æ–∑–¥–∞–Ω –¥–µ–±–∞–≥-–¥–∞–º–ø: {filename}")
        logger.info(f"üìä [DEBUG DUMP] –°–≤–µ—á–µ–π: {len(dump_data['recent_candles'])}, RSI –∑–Ω–∞—á–µ–Ω–∏–π: {len(dump_data['rsi_values'])}")
        logger.info(f"üíπ [DEBUG DUMP] –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {dump_data['bot_state']['position']}, –ü–æ—Å–ª–µ–¥–Ω–∏–π RSI: {dump_data['bot_state']['last_rsi']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        if bot_instance.notifications:
            telegram_msg = f"üîç <b>Debug Dump —Å–æ–∑–¥–∞–Ω</b>\n\n" \
                          f"üìÅ –§–∞–π–ª: <code>{filename}</code>\n" \
                          f"üìä –°–≤–µ—á–µ–π: {len(dump_data['recent_candles'])}\n" \
                          f"üìà RSI: {dump_data['bot_state']['last_rsi']:.2f}\n" \
                          f"üíº –ü–æ–∑–∏—Ü–∏—è: {dump_data['bot_state']['position']}\n" \
                          f"‚è∞ {timestamp.strftime('%H:%M:%S UTC')}"
            bot_instance.notifications.telegram.send_message(telegram_msg)
        
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå [DEBUG DUMP] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞: {e}")
        return None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–±–∞–≥-–¥–∞–º–ø–∞"""
    signal_names = {
        signal.SIGUSR1: "SIGUSR1",  # Debug dump
        signal.SIGUSR2: "SIGUSR2",  # Force reconnect
        signal.SIGHUP: "SIGHUP",    # Reset reconnection counter
        signal.SIGTERM: "SIGTERM",
        signal.SIGINT: "SIGINT"
    }
    
    signal_name = signal_names.get(signum, f"SIGNAL_{signum}")
    
    if global_bot_instance:
        if signum == signal.SIGUSR1:
            # Debug dump
            logger.info(f"üîî [SIGNAL] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name} - —Å–æ–∑–¥–∞–µ–º –¥–µ–±–∞–≥-–¥–∞–º–ø")
            filename = create_debug_dump(global_bot_instance, signal_name)
            if filename:
                logger.info(f"‚úÖ [SIGNAL] –î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            else:
                logger.error(f"‚ùå [SIGNAL] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–º–ø")
                
        elif signum == signal.SIGUSR2:
            # Force reconnect
            logger.info(f"üîî [SIGNAL] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name} - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            global_bot_instance.force_reconnect()
            
        elif signum == signal.SIGHUP:
            # Reset reconnection counter
            logger.info(f"üîî [SIGNAL] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name} - —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫")
            global_bot_instance.reset_reconnection_counter()
            
        else:
            # Other signals - create dump too
            logger.info(f"üîî [SIGNAL] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name} - —Å–æ–∑–¥–∞–µ–º –¥–µ–±–∞–≥-–¥–∞–º–ø")
            filename = create_debug_dump(global_bot_instance, signal_name)
            if filename:
                logger.info(f"‚úÖ [SIGNAL] –î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
    else:
        logger.warning(f"‚ö†Ô∏è [SIGNAL] –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ï—Å–ª–∏ —ç—Ç–æ SIGTERM –∏–ª–∏ SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    if signum in [signal.SIGTERM, signal.SIGINT]:
        logger.info(f"üõë [SIGNAL] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Å–∏–≥–Ω–∞–ª—É {signal_name}")
        if global_bot_instance and global_bot_instance.notifications:
            global_bot_instance.notifications.notify_bot_stop(f"–°–∏–≥–Ω–∞–ª {signal_name}")
        exit(0)

# === –ö–õ–ê–°–° TELEGRAM ===
class TelegramNotifier:
    def __init__(self, bot_token, chat_id, logger):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.logger = logger
        self.api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage" if bot_token else None
        self.enabled = bool(bot_token and chat_id)
        
        if self.enabled:
            self.logger.info("üì± [TELEGRAM] Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
        else:
            self.logger.warning("üì± [TELEGRAM] Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (–Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id)")
    
    def send_message(self, text, parse_mode="HTML"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.enabled:
            return False
        
        try:
            data = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': parse_mode,
                'disable_web_page_preview': True
            }
            
            response = requests.post(self.api_url, data=data, timeout=10)
            
            if response.status_code == 200:
                return True
            else:
                self.logger.error(f"[TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
                return False
                
        except requests.exceptions.Timeout:
            self.logger.error("[TELEGRAM] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
        except requests.exceptions.RequestException as e:
            self.logger.error(f"[TELEGRAM] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            return False
        except Exception as e:
            self.logger.error(f"[TELEGRAM] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        if not self.enabled:
            return False
        
        test_message = "üîß <b>–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\nTelegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        return self.send_message(test_message)

# === –ö–õ–ê–°–° –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
class NotificationManager:
    def __init__(self, logger):
        self.logger = logger
        self.last_connection_status = None
        self.last_notification_time = {}
        self.notification_cooldown = 60  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram
        self.telegram = TelegramNotifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, logger)
    
    def _can_notify(self, notification_type):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)"""
        now = time.time()
        last_time = self.last_notification_time.get(notification_type, 0)
        return now - last_time >= self.notification_cooldown
    
    def _update_notification_time(self, notification_type):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.last_notification_time[notification_type] = time.time()
    
    def notify_connection_lost(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self._can_notify('connection_lost'):
            message = "üî¥ [CONNECTION] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –ø–æ—Ç–µ—Ä—è–Ω–æ!"
            self.logger.error(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            telegram_msg = f"üî¥ <b>–†–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b>\n\n‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ\n‚è∞ {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
            self.telegram.send_message(telegram_msg)
            
            self._update_notification_time('connection_lost')
    
    def notify_connection_restored(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.last_connection_status == False:  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ
            message = "üü¢ [CONNECTION] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
            self.logger.info(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            telegram_msg = f"üü¢ <b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n‚è∞ {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
            self.telegram.send_message(telegram_msg)
            
            self._update_notification_time('connection_restored')
    
    def notify_trade_entry(self, signal, price, rsi):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Å–¥–µ–ª–∫—É"""
        direction = "–õ–û–ù–ì" if signal == 1 else "–®–û–†–¢"
        emoji = "üìà" if signal == 1 else "üìâ"
        
        message = f"{emoji} [TRADE ENTRY] –í—Ö–æ–¥ –≤ {direction} –ø–æ —Ü–µ–Ω–µ {price} (RSI: {rsi:.2f})"
        self.logger.info(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        telegram_msg = f"{emoji} <b>–í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é</b>\n\n" \
                      f"üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{direction}</b>\n" \
                      f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <code>{price}</code>\n" \
                      f"üìä RSI: <code>{rsi:.2f}</code>\n" \
                      f"‚è∞ {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
        self.telegram.send_message(telegram_msg)
    
    def notify_trade_exit(self, signal, price, rsi, pnl=None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–¥–µ–ª–∫–∏"""
        direction = "–õ–û–ù–ì–ê" if signal == 1 else "–®–û–†–¢–ê"
        emoji = "üíπ" if pnl and pnl > 0 else "üìâ"
        
        pnl_str = f" PnL: {pnl:.4f}" if pnl is not None else ""
        message = f"{emoji} [TRADE EXIT] –í—ã—Ö–æ–¥ –∏–∑ {direction} –ø–æ —Ü–µ–Ω–µ {price} (RSI: {rsi:.2f}){pnl_str}"
        self.logger.info(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        pnl_emoji = "üí∞" if pnl and pnl > 0 else "üí∏" if pnl and pnl < 0 else "‚öñ"
        pnl_text = f"\n{pnl_emoji} PnL: <code>{pnl:.4f}</code>" if pnl is not None else ""
        
        telegram_msg = f"{emoji} <b>–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n" \
                      f"üìä –ó–∞–∫—Ä—ã—Ç–∏–µ: <b>{direction}</b>\n" \
                      f"üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: <code>{price}</code>\n" \
                      f"üìä RSI: <code>{rsi:.2f}</code>{pnl_text}\n" \
                      f"‚è∞ {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
        self.telegram.send_message(telegram_msg)
    
    def notify_order_placed(self, side, qty, price, order_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞"""
        message = f"üìã [ORDER] –†–∞–∑–º–µ—â–µ–Ω {side} –æ—Ä–¥–µ—Ä: {qty} –ø–æ —Ü–µ–Ω–µ {price} (ID: {order_id})"
        self.logger.info(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        telegram_msg = f"üìã <b>–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω</b>\n\n" \
                      f"üìä –¢–∏–ø: <b>{side}</b>\n" \
                      f"üíπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{qty}</code>\n" \
                      f"üí∞ –¶–µ–Ω–∞: <code>{price}</code>\n" \
                      f"üè∑ ID: <code>{order_id}</code>\n" \
                      f"‚è∞ {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
        self.telegram.send_message(telegram_msg)
    
    def notify_order_cancelled(self, order_id, reason=""):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞"""
        reason_str = f" ({reason})" if reason else ""
        message = f"‚ùå [ORDER] –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä {order_id}{reason_str}"
        self.logger.info(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏—á–∏–Ω–∞)
        if reason:
            telegram_msg = f"‚ùå <b>–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n" \
                          f"üè∑ ID: <code>{order_id}</code>\n" \
                          f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n" \
                          f"‚è∞ {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
            self.telegram.send_message(telegram_msg)
    
    def notify_error(self, error_msg, error_type="GENERAL"):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if self._can_notify(f'error_{error_type}'):
            message = f"‚ö†Ô∏è [ERROR {error_type}] {error_msg}"
            self.logger.error(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏)
            if error_type in ['CRITICAL', 'TRADE', 'WEBSOCKET']:
                emoji = "üö®" if error_type == 'CRITICAL' else "‚ö†Ô∏è"
                telegram_msg = f"{emoji} <b>–û—à–∏–±–∫–∞ {error_type}</b>\n\n" \
                              f"üìù {error_msg}\n" \
                              f"‚è∞ {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
                self.telegram.send_message(telegram_msg)
            
            self._update_notification_time(f'error_{error_type}')
    
    def notify_bot_start(self, symbol, testnet_mode):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        mode = "TESTNET" if testnet_mode else "MAINNET"
        message = f"üöÄ [BOT] –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ {mode}"
        self.logger.info(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        telegram_msg = f"üöÄ <b>–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞</b>\n\n" \
                      f"üìä –°–∏–º–≤–æ–ª: <b>{symbol}</b>\n" \
                      f"üåê –†–µ–∂–∏–º: <b>{mode}</b>\n" \
                      f"üìà RSI –ø–µ—Ä–∏–æ–¥: <code>{RSI_PERIOD}</code>\n" \
                      f"üìâ RSI –ø–æ–∫—É–ø–∫–∞: <code>{RSI_BUY}</code>\n" \
                      f"üìà RSI –ø—Ä–æ–¥–∞–∂–∞: <code>{RSI_SELL}</code>\n" \
                      f"‚è∞ {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
        self.telegram.send_message(telegram_msg)
    
    def notify_bot_stop(self, reason=""):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        reason_str = f" ({reason})" if reason else ""
        message = f"üõë [BOT] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞{reason_str}"
        self.logger.info(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        telegram_msg = f"üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞</b>\n\n" \
                      f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason if reason else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å'}\n" \
                      f"‚è∞ {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
        self.telegram.send_message(telegram_msg)
    
    def test_telegram(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return self.telegram.test_connection()

    def set_connection_status(self, status):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.last_connection_status != status:
            if status:
                self.notify_connection_restored()
            else:
                self.notify_connection_lost()
            self.last_connection_status = status

class RSIBot:
    def __init__(self, http, ws, symbol, position_size):
        self.http = http
        self.ws = ws
        self.symbol = symbol
        self.position_size = position_size
        self.testnet = TESTNET  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É testnet
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RSIStrategyBase —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ–π AI-—Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        self.strategy = RSIStrategyBase(
            rsi_period=RSI_PERIOD,
            rsi_buy=RSI_BUY,
            rsi_sell=RSI_SELL,
            candle_minutes=CANDLE_MINUTES,
            use_custom_rsi=USE_CUSTOM_RSI,  # üèÜ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç—Å—è –≤ config.py
            use_dual_rsi=USE_DUAL_RSI,
            use_neural_filter=USE_NEURAL_FILTER,  # üß† AI-—Ñ–∏–ª—å—Ç—Ä
            neural_confidence_threshold=NEURAL_CONFIDENCE_THRESHOLD
        )
        self.position = 0  # 1 = long, -1 = short, 0 = flat
        self.last_signal = 0
        self.last_order_time = None
        self.last_rsi_print_minute = None
        self.last_rsi = None
        # –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notifications = NotificationManager(logger)
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.last_tick_time = time.time()
        self.connection_timeout = 30  # —Å–µ–∫—É–Ω–¥—ã –±–µ–∑ —Ç–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑—Ä—ã–≤–∞
        self.is_connected = True
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 10
        self.reconnect_delay = 30  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.dns_check_delay = 60  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É DNS –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        self.last_reconnect_attempt = 0  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self._start_connection_monitor()

    def _start_connection_monitor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def monitor():
            while True:
                time.sleep(10)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                current_time = time.time()
                time_since_last_tick = current_time - self.last_tick_time
                
                if time_since_last_tick > self.connection_timeout:
                    if self.is_connected:
                        self.is_connected = False
                        self.notifications.set_connection_status(False)
                        logger.warning(f"‚è∞ [CONNECTION] –ù–µ—Ç —Ç–∏–∫–æ–≤ —É–∂–µ {time_since_last_tick:.0f} —Å–µ–∫")
                        
                        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                        current_time = time.time()
                        if current_time - self.last_reconnect_attempt >= self.reconnect_delay:
                            self.last_reconnect_attempt = current_time
                            self._attempt_reconnection()
                        else:
                            remaining_time = self.reconnect_delay - (current_time - self.last_reconnect_attempt)
                            logger.info(f"‚è≥ [CONNECTION] –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π: {remaining_time:.0f} —Å–µ–∫")
                else:
                    if not self.is_connected:
                        self.is_connected = True
                        self.reconnect_attempts = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                        self.notifications.set_connection_status(True)
        
        monitor_thread = threading.Thread(target=monitor, daemon=True)
        monitor_thread.start()
    
    def _attempt_reconnection(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.reconnect_attempts >= self.max_reconnect_attempts:
            logger.error(f"‚ùå [RECONNECT] –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({self.max_reconnect_attempts})")
            self.notifications.telegram.send_message(
                f"‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫</b>\n\n"
                f"–ü–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {self.max_reconnect_attempts}\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
            )
            return
        
        self.reconnect_attempts += 1
        logger.info(f"üîÑ [RECONNECT] –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è #{self.reconnect_attempts}/{self.max_reconnect_attempts}")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
        issue_type = self.diagnose_connection_issues()
        
        if issue_type == "NO_INTERNET":
            logger.warning(f"üåê [RECONNECT] –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –ø–æ–ø—ã—Ç–∫–∞ #{self.reconnect_attempts}")
            try:
                self.notifications.telegram.send_message(
                    f"üåê <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º</b>\n\n"
                    f"–ü–æ–ø—ã—Ç–∫–∞ #{self.reconnect_attempts}/{self.max_reconnect_attempts}\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.reconnect_delay} —Å–µ–∫"
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ Telegram –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
            
        elif issue_type == "DNS_FAILURE":
            logger.warning(f"üîç [RECONNECT] DNS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ #{self.reconnect_attempts}")
            try:
                self.notifications.telegram.send_message(
                    f"üîç <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å DNS</b>\n\n"
                    f"–ù–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å stream.bybit.com\n"
                    f"–ü–æ–ø—ã—Ç–∫–∞ #{self.reconnect_attempts}/{self.max_reconnect_attempts}\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.dns_check_delay} —Å–µ–∫"
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ Telegram –ø—Ä–∏ DNS –ø—Ä–æ–±–ª–µ–º–∞—Ö
            
        elif issue_type == "API_DOWN":
            logger.warning(f"üîó [RECONNECT] Bybit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ #{self.reconnect_attempts}")
            try:
                self.notifications.telegram.send_message(
                    f"üîó <b>Bybit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    f"–ü–æ–ø—ã—Ç–∫–∞ #{self.reconnect_attempts}/{self.max_reconnect_attempts}\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.reconnect_delay} —Å–µ–∫"
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ Telegram –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å API
            
        else:  # WEBSOCKET_ISSUE
            logger.info(f"üîå [RECONNECT] –ü—Ä–æ–±–ª–µ–º–∞ —Å WebSocket, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            if self.recreate_websocket():
                logger.info("‚úÖ [RECONNECT] WebSocket —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                try:
                    self.notifications.telegram.send_message(
                        f"‚úÖ <b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
                        f"WebSocket –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ\n"
                        f"–ü–æ–ø—ã—Ç–∫–∞ #{self.reconnect_attempts}/{self.max_reconnect_attempts}"
                    )
                except:
                    pass
                return
            else:
                logger.error("‚ùå [RECONNECT] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å WebSocket")
        
        # –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"‚è≥ [RECONNECT] –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {self.reconnect_delay} —Å–µ–∫...")

    def cancel_my_orders(self):
        try:
            open_orders = self.http.get_open_orders(
                category="linear",
                symbol=self.symbol
            )
            for order in open_orders['result']['list']:
                link_id = order.get('orderLinkId', '')
                if link_id.startswith('rsi-bot-'):
                    order_id = order['orderId']
                    self.http.cancel_order(
                        category="linear",
                        symbol=self.symbol,
                        orderId=order_id
                    )
                    logger.info(f"[CANCEL] Cancelled order {order_id} ({link_id})")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞: {e}")

    def on_tick(self, price, dt):
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.last_tick_time = time.time()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–∞
        signal = self.strategy.on_tick(price, dt)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.strategy.rsi_values:
            self.last_rsi = self.strategy.rsi_values[-1]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        rsi_str = f"{self.last_rsi:.2f}" if self.last_rsi is not None else "N/A"
        logger.debug(f"[DEBUG] Signal={signal}, Bot.position={self.position}, Last_signal={self.last_signal}, RSI={rsi_str}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—á–µ–º—É –Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏
        if self.last_rsi is not None:
            if signal != self.position:
                if signal == self.last_signal:
                    logger.debug(f"[DEBUG] –°–∏–≥–Ω–∞–ª {signal} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (last_signal={self.last_signal})")
                else:
                    logger.debug(f"[DEBUG] –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª! {self.last_signal} ‚Üí {signal}")
            else:
                logger.debug(f"[DEBUG] –°–∏–≥–Ω–∞–ª {signal} = —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è {self.position}, —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –Ω—É–∂–Ω–∞")
        
        # --- –¢–æ—Ä–≥–æ–≤–ª—è ---
        if signal != self.position and signal != self.last_signal:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
            if signal == 1 and self.position == 0:
                self.notifications.notify_trade_entry(signal, price, self.last_rsi)
            elif signal == -1 and self.position == 0:
                self.notifications.notify_trade_entry(signal, price, self.last_rsi)
            elif signal == 0 and self.position != 0:
                self.notifications.notify_trade_exit(self.position, price, self.last_rsi)
            
            logger.info(f"[TRADE TRIGGER] Signal changed: {self.last_signal} -> {signal}, Current position: {self.position}")
            self.cancel_my_orders()
            self.trade(signal, price)
            self.last_signal = signal
        
        # --- –í—ã–≤–æ–¥ RSI, —Ü–µ–Ω—ã –∏ BB —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É ---
        current_minute = dt.replace(second=0, microsecond=0)
        if self.last_rsi_print_minute is None or current_minute > self.last_rsi_print_minute:
            bb_str = ""
            if self.strategy.bb_values and len(self.strategy.bb_values) > 0:
                bb = self.strategy.bb_values[-1]
                if bb is not None:
                    ma, upper, lower = bb
                    bb_str = f" BB: lower={lower:.2f} MA={ma:.2f} upper={upper:.2f}"
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏
            position_status = {
                1: "–õ–û–ù–ì",
                -1: "–®–û–†–¢", 
                0: "–ë–ï–ó –ü–û–ó–ò–¶–ò–ò"
            }.get(self.position, "–ù–ï–ò–ó–í–ï–°–¢–ù–û")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            next_action = ""
            if self.position == 0:  # –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏
                if self.last_rsi < RSI_BUY:
                    next_action = f" ‚Üí –ì–æ—Ç–æ–≤ –∫ –õ–û–ù–ì–£ (RSI < {RSI_BUY})"
                elif self.last_rsi > RSI_SELL:
                    next_action = f" ‚Üí –ì–æ—Ç–æ–≤ –∫ –®–û–†–¢–£ (RSI > {RSI_SELL})"
                else:
                    next_action = f" ‚Üí –û–∂–∏–¥–∞–Ω–∏–µ (RSI –º–µ–∂–¥—É {RSI_BUY}-{RSI_SELL})"
            elif self.position == 1:  # –≤ –ª–æ–Ω–≥–µ
                if self.last_rsi > RSI_SELL:
                    next_action = f" ‚Üí –ì–æ—Ç–æ–≤ –∫ –í–´–•–û–î–£ –∏–∑ –ª–æ–Ω–≥–∞ (RSI > {RSI_SELL})"
                else:
                    next_action = f" ‚Üí –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –õ–û–ù–ì (RSI < {RSI_SELL})"
            elif self.position == -1:  # –≤ —à–æ—Ä—Ç–µ
                if self.last_rsi < RSI_BUY:
                    next_action = f" ‚Üí –ì–æ—Ç–æ–≤ –∫ –í–´–•–û–î–£ –∏–∑ —à–æ—Ä—Ç–∞ (RSI < {RSI_BUY})"
                else:
                    next_action = f" ‚Üí –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –®–û–†–¢ (RSI > {RSI_BUY})"
            
            logger.info(f"[STATUS] –ü–æ–∑–∏—Ü–∏—è: {position_status} | RSI: {self.last_rsi:.2f} | –¶–µ–Ω–∞: {price}{next_action}")
            if bb_str:
                logger.info(f"[BB]{bb_str}")
            self.last_rsi_print_minute = current_minute
    
    def create_manual_dump(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–±–∞–≥-–¥–∞–º–ø –≤—Ä—É—á–Ω—É—é"""
        return create_debug_dump(self, "MANUAL")
    
    def force_reconnect(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket"""
        logger.info("üîÑ [MANUAL] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        self.reconnect_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        self.last_reconnect_attempt = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        
        if self.recreate_websocket():
            logger.info("‚úÖ [MANUAL] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            try:
                self.notifications.telegram.send_message("‚úÖ <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</b>\n\nWebSocket –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é")
            except:
                logger.warning("‚ö†Ô∏è [MANUAL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")
        else:
            logger.error("‚ùå [MANUAL] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ")
            try:
                self.notifications.telegram.send_message("‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å WebSocket")
            except:
                logger.warning("‚ö†Ô∏è [MANUAL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")
    
    def reset_reconnection_counter(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        logger.info("üîÑ [MANUAL] –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        self.reconnect_attempts = 0
        self.last_reconnect_attempt = 0
        try:
            self.notifications.telegram.send_message("üîÑ <b>–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω</b>\n\n–ü–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: 0/10")
        except:
            logger.warning("‚ö†Ô∏è [MANUAL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")
    
    def check_dns_resolution(self, host="stream.bybit.com"):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ DNS –¥–ª—è —Ö–æ—Å—Ç–∞"""
        try:
            socket.gethostbyname(host)
            return True
        except socket.gaierror:
            return False
    
    def check_internet_connectivity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ ping"""
        try:
            # –ü–∏–Ω–≥—É–µ–º Google DNS
            result = subprocess.run(['ping', '-c', '1', '-W', '3', '8.8.8.8'], 
                                  capture_output=True, timeout=5)
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def check_bybit_api_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bybit API"""
        try:
            response = requests.get('https://api.bybit.com/v5/market/time', timeout=10)
            return response.status_code == 200
        except:
            return False
    
    def diagnose_connection_issues(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"""
        logger.info("üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
        internet_ok = self.check_internet_connectivity()
        logger.info(f"üåê [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {'‚úÖ OK' if internet_ok else '‚ùå –ù–ï–¢'}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS
        dns_ok = self.check_dns_resolution()
        logger.info(f"üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] DNS (stream.bybit.com): {'‚úÖ OK' if dns_ok else '‚ùå –ù–ï–¢'}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Bybit API
        api_ok = self.check_bybit_api_health()
        logger.info(f"üîó [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] Bybit API: {'‚úÖ OK' if api_ok else '‚ùå –ù–ï–¢'}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
        if not internet_ok:
            return "NO_INTERNET"
        elif not dns_ok:
            return "DNS_FAILURE" 
        elif not api_ok:
            return "API_DOWN"
        else:
            return "WEBSOCKET_ISSUE"
    
    def recreate_websocket(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            logger.info("üîÑ [RECONNECT] –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try:
                self.ws.unsubscribe(f"publicTrade.{self.symbol}")
            except:
                pass
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.ws = WebSocket(
                testnet=self.testnet,
                channel_type="linear"
            )
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ
            self.ws.subscribe(
                topic=f"publicTrade.{self.symbol}",
                callback=self.on_tick
            )
            
            logger.info("‚úÖ [RECONNECT] WebSocket –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [RECONNECT] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è WebSocket: {e}")
            return False

    def trade(self, signal, price):
        logger.info(f"[TRADE] {datetime.fromtimestamp(time.time(), timezone.utc)} Signal: {signal}, Price: {price}")
        try:
            order_link_id = f"rsi-bot-{uuid.uuid4()}"
            offset = 0.001  # 0.1%
            # –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
            if self.position == 1 and signal == -1:
                limit_price = round(price * (1 + offset), 2)
                response = self.http.place_order(
                    category="linear",
                    symbol=self.symbol,
                    side="Sell",
                    orderType="Limit",
                    qty=self.position_size,
                    price=limit_price,
                    timeInForce="PostOnly",
                    reduceOnly=True,
                    orderLinkId=order_link_id
                )
                if response.get('retCode') == 0:
                    order_id = response['result']['orderId']
                    self.notifications.notify_order_placed("SELL (–∑–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥–∞)", self.position_size, limit_price, order_id)
                    
            elif self.position == -1 and signal == 1:
                limit_price = round(price * (1 - offset), 2)
                response = self.http.place_order(
                    category="linear",
                    symbol=self.symbol,
                    side="Buy",
                    orderType="Limit",
                    qty=self.position_size,
                    price=limit_price,
                    timeInForce="PostOnly",
                    reduceOnly=True,
                    orderLinkId=order_link_id
                )
                if response.get('retCode') == 0:
                    order_id = response['result']['orderId']
                    self.notifications.notify_order_placed("BUY (–∑–∞–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç–∞)", self.position_size, limit_price, order_id)
            
            # –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
            if signal == 1:
                limit_price = round(price * (1 - offset), 2)
                response = self.http.place_order(
                    category="linear",
                    symbol=self.symbol,
                    side="Buy",
                    orderType="Limit",
                    qty=self.position_size,
                    price=limit_price,
                    timeInForce="PostOnly",
                    orderLinkId=order_link_id
                )
                if response.get('retCode') == 0:
                    order_id = response['result']['orderId']
                    self.notifications.notify_order_placed("BUY (–æ—Ç–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥–∞)", self.position_size, limit_price, order_id)
                    
            elif signal == -1:
                limit_price = round(price * (1 + offset), 2)
                response = self.http.place_order(
                    category="linear",
                    symbol=self.symbol,
                    side="Sell",
                    orderType="Limit",
                    qty=self.position_size,
                    price=limit_price,
                    timeInForce="PostOnly",
                    orderLinkId=order_link_id
                )
                if response.get('retCode') == 0:
                    order_id = response['result']['orderId']
                    self.notifications.notify_order_placed("SELL (–æ—Ç–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç–∞)", self.position_size, limit_price, order_id)
            
            self.position = signal
        except Exception as e:
            self.notifications.notify_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}", "TRADE")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    global global_bot_instance
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä
    health_server = start_health_server()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGUSR1, signal_handler)  # kill -USR1 <pid>
    signal.signal(signal.SIGUSR2, signal_handler)  # kill -USR2 <pid>
    signal.signal(signal.SIGHUP, signal_handler)   # kill -HUP <pid>
    signal.signal(signal.SIGTERM, signal_handler)  # kill <pid>
    signal.signal(signal.SIGINT, signal_handler)   # Ctrl+C
    
    logger.info("üîî [SIGNALS] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:")
    logger.info("   SIGUSR1 (kill -USR1 <pid>) - —Å–æ–∑–¥–∞—Ç—å –¥–µ–±–∞–≥-–¥–∞–º–ø")
    logger.info("   SIGUSR2 (kill -USR2 <pid>) - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    logger.info("   SIGHUP (kill -HUP <pid>) - —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫") 
    logger.info("   SIGTERM (kill <pid>) - –¥–∞–º–ø + –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
    logger.info("   SIGINT (Ctrl+C) - –¥–∞–º–ø + –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
    
    http = HTTP(
        testnet=TESTNET,
        api_key=API_KEY,
        api_secret=API_SECRET
    )
    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–µ—á–µ–π ---
    logger.info(f"Loading historical candles... (testnet={TESTNET})")
    klines = http.get_kline(
        category="linear",
        symbol=SYMBOL,
        interval="5",
        limit=50
    )
    # klines['result']['list'] ‚Äî —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º!
    raw_candles = klines['result']['list'][::-1]  # —Ç–µ–ø–µ—Ä—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
    preload = []
    for c in raw_candles:
        preload.append({
            'open': float(c[1]),
            'high': float(c[2]),
            'low': float(c[3]),
            'close': float(c[4]),
            'start_time': datetime.fromtimestamp(int(c[0]) / 1000, timezone.utc)
        })
    # --- –í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ ---
    try:
        balance = http.get_wallet_balance(accountType="UNIFIED", coin="USDT")
        usdt_balance = balance['result']['list'][0]['totalEquity']
        logger.info(f"Current USDT balance: {usdt_balance}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}")
    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ ---
    try:
        positions = http.get_positions(
            category="linear",
            symbol=SYMBOL
        )
        pos_list = positions['result']['list']
        current_position = 0
        found_position = False
        for pos in pos_list:
            size = float(pos['size'])
            side = pos['side']
            if size > 0:
                found_position = True
                if side == 'Buy':
                    current_position = 1
                elif side == 'Sell':
                    current_position = -1
                logger.info(f"Open position detected: {side} size={size}")
        if not found_position:
            logger.info(f"No open positions detected.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é: {e}")
        current_position = 0
    
    # --- WebSocket ---
    ws = WebSocket(
        testnet=TESTNET,
        channel_type="linear"
    )
    bot = RSIBot(http, ws, SYMBOL, POSITION_SIZE)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    global_bot_instance = bot
    logger.info(f"ü§ñ [BOT] –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–µ–±–∞–≥-–¥–∞–º–ø–æ–≤ (PID: {os.getpid()})")
    
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    for candle in preload:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–∂–∏–¥–∞–µ—Ç datetime –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ timestamp
        bot.strategy.on_tick(candle['close'], candle['start_time'])
    
    # --- –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ RSI –∏ —Ü–µ–Ω—ã ---
    if bot.strategy.rsi_values:
        last_rsi = bot.strategy.rsi_values[-1]
        last_price = preload[-1]['close'] if preload else 0
        last_time = preload[-1]['start_time'] if preload else datetime.now(timezone.utc)
        logger.info(f"Last candle: {last_time.strftime('%Y-%m-%d %H:%M:%S')} Close: {last_price} RSI({RSI_PERIOD}): {last_rsi:.2f}")
    
    # –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –±–æ—Ç–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    bot.position = current_position
    bot.strategy.position = current_position  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
    bot.last_signal = current_position  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_signal —Ä–∞–≤–Ω—ã–º —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    
    logger.info(f"[INIT] Bot position: {bot.position}, Strategy position: {bot.strategy.position}, Last signal: {bot.last_signal}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if TELEGRAM_ENABLED:
        logger.info("üì± [TELEGRAM] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        if bot.notifications.test_telegram():
            logger.info("‚úÖ [TELEGRAM] Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            logger.warning("‚ö†Ô∏è [TELEGRAM] –ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    bot.notifications.notify_bot_start(SYMBOL, TESTNET)
    logger.info("Bot started. Waiting for ticks...")
    
    def handle_message(msg):
        if 'data' in msg and isinstance(msg['data'], list):
            for trade in msg['data']:
                price = float(trade['p'])
                ts = int(trade['T'])
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ datetime –æ–±—ä–µ–∫—Ç
                dt = datetime.fromtimestamp(ts / 1000, timezone.utc)
                bot.on_tick(price, dt)
    
    try:
        ws.trade_stream(
            symbol=SYMBOL,
            callback=handle_message
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("üõë [BOT] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        bot.notifications.notify_bot_stop("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å")
    except Exception as e:
        bot.notifications.notify_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket: {e}", "CRITICAL")
        bot.notifications.notify_bot_stop(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"[WS CRITICAL ERROR] {e}")
    finally:
        logger.info("üèÅ [BOT] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

if __name__ == "__main__":
    main() 