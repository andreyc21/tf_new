import numpy as np
from datetime import datetime, timedelta

try:
    import talib
    TALIB_AVAILABLE = True
except ImportError:
    TALIB_AVAILABLE = False
    print("‚ö†Ô∏è  TA-Lib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RSI.")

class Candle:
    def __init__(self, start_time):
        self.start_time = start_time
        self.open = None
        self.high = None
        self.low = None
        self.close = None
        self.volume = 0.0

    def add_tick(self, price, volume):
        if self.open is None:
            self.open = price
        self.high = price if self.high is None else max(self.high, price)
        self.low = price if self.low is None else min(self.low, price)
        self.close = price
        self.volume += volume

    def to_tuple(self):
        return (self.start_time, self.open, self.high, self.low, self.close, self.volume)

    def to_dict(self):
        return {
            'start_time': self.start_time,
            'open': self.open,
            'high': self.high,
            'low': self.low,
            'close': self.close,
            'volume': self.volume
        }

# === –ö–ê–°–¢–û–ú–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (–Ω–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è) ===

def compute_rsi_custom(prices, period=14):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RSI —Å –ø—Ä–æ—Å—Ç—ã–º —Å—Ä–µ–¥–Ω–∏–º (SMA-based)
    
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±—ç–∫—Ç–µ—Å—Ç–∞—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–∏–±—ã–ª–µ–π/—É–±—ã—Ç–∫–æ–≤.
    """
    prices = np.array(prices)
    if len(prices) < period + 1:
        return 50.0
    deltas = np.diff(prices[-(period+1):])
    seed = deltas[:period]
    up = seed[seed > 0].sum() / period
    down = -seed[seed < 0].sum() / period
    rs = up / down if down != 0 else 0
    rsi = 100. - 100. / (1. + rs)
    return rsi

def compute_bollinger_bands_custom(prices, period=20, num_std=2):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bollinger Bands"""
    prices = np.array(prices)
    if len(prices) < period:
        return None, None, None
    ma = np.mean(prices[-period:])
    std = np.std(prices[-period:])
    upper = ma + num_std * std
    lower = ma - num_std * std
    return ma, upper, lower

# === –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (TA-Lib –∏–ª–∏ fallback) ===

def compute_rsi(prices, period=14):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RSI (TA-Lib –∏–ª–∏ fallback –∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π)"""
    if TALIB_AVAILABLE:
        prices_array = np.array(prices, dtype=np.float64)
        if len(prices_array) < period + 1:
            return 50.0
        rsi_values = talib.RSI(prices_array, timeperiod=period)
        return rsi_values[-1] if not np.isnan(rsi_values[-1]) else 50.0
    else:
        # Fallback –∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        return compute_rsi_custom(prices, period)

def compute_bollinger_bands(prices, period=20, num_std=2):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Bollinger Bands (TA-Lib –∏–ª–∏ fallback)"""
    if TALIB_AVAILABLE:
        prices_array = np.array(prices, dtype=np.float64)
        if len(prices_array) < period:
            return None, None, None
        upper, middle, lower = talib.BBANDS(prices_array, timeperiod=period, nbdevup=num_std, nbdevdn=num_std, matype=0)
        if np.isnan(upper[-1]) or np.isnan(middle[-1]) or np.isnan(lower[-1]):
            return None, None, None
        return middle[-1], upper[-1], lower[-1]
    else:
        # Fallback –∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        return compute_bollinger_bands_custom(prices, period, num_std)

# === –ò–ù–î–ò–ö–ê–¢–û–†–´ –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò ===

def compute_atr_custom(candles, period=14):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Average True Range (ATR)"""
    if len(candles) < 2:
        return 0.0
    
    true_ranges = []
    for i in range(1, len(candles)):
        prev_candle = candles[i-1]
        curr_candle = candles[i]
        
        # True Range = max(high-low, |high-prev_close|, |low-prev_close|)
        tr1 = curr_candle.high - curr_candle.low
        tr2 = abs(curr_candle.high - prev_candle.close)
        tr3 = abs(curr_candle.low - prev_candle.close)
        
        true_range = max(tr1, tr2, tr3)
        true_ranges.append(true_range)
    
    # ATR = —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ True Range –∑–∞ –ø–µ—Ä–∏–æ–¥
    if len(true_ranges) >= period:
        return np.mean(true_ranges[-period:])
    elif len(true_ranges) > 0:
        return np.mean(true_ranges)
    else:
        return 0.0

def compute_atr(candles, period=14):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ATR (TA-Lib –∏–ª–∏ fallback –∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π)"""
    if TALIB_AVAILABLE and len(candles) >= period:
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è TA-Lib
            highs = np.array([c.high for c in candles], dtype=np.float64)
            lows = np.array([c.low for c in candles], dtype=np.float64)
            closes = np.array([c.close for c in candles], dtype=np.float64)
            
            if len(highs) >= period:
                atr_values = talib.ATR(highs, lows, closes, timeperiod=period)
                return atr_values[-1] if not np.isnan(atr_values[-1]) else 0.0
            else:
                return 0.0
        except Exception:
            # Fallback –∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            return compute_atr_custom(candles, period)
    else:
        # Fallback –∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        return compute_atr_custom(candles, period)

def compute_volatility_ratio(candles, atr_period=14, lookback=50):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—É—â–∞—è ATR / —Å—Ä–µ–¥–Ω—è—è ATR)"""
    if len(candles) < lookback:
        return 1.0
    
    current_atr = compute_atr(candles, atr_period)
    
    # –í—ã—á–∏—Å–ª—è–µ–º ATR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ lookback –æ–∫–Ω–µ
    atr_values = []
    for i in range(max(atr_period + 1, len(candles) - lookback), len(candles)):
        atr_val = compute_atr(candles[:i+1], atr_period)
        if atr_val > 0:
            atr_values.append(atr_val)
    
    if len(atr_values) == 0 or current_atr == 0:
        return 1.0
    
    avg_atr = np.mean(atr_values)
    return current_atr / avg_atr if avg_atr > 0 else 1.0

class RSIStrategyBase:
    def __init__(self, rsi_period=14, rsi_buy=30, rsi_sell=70, bb_period=20, bb_std=2, candle_minutes=5, 
                 use_custom_rsi=True, use_dual_rsi=False, use_neural_filter=False, 
                 neural_confidence_threshold=0.6):  # üèÜ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é!
        self.rsi_period = rsi_period
        self.rsi_buy = rsi_buy
        self.rsi_sell = rsi_sell
        self.bb_period = bb_period
        self.bb_std = bb_std
        self.candle_minutes = candle_minutes
        self.use_custom_rsi = use_custom_rsi  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π RSI
        self.use_dual_rsi = use_dual_rsi      # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–∞ RSI –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.use_neural_filter = use_neural_filter  # üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        self.neural_confidence_threshold = neural_confidence_threshold
        
        self.position = 0  # 1 = long, -1 = short, 0 = flat
        self.last_price = None
        self.candles = []
        self.current_candle = None
        self.current_candle_time = None
        
        # –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        self.rsi_values = []           # –û—Å–Ω–æ–≤–Ω–æ–π RSI (TA-Lib –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π)
        self.rsi_custom_values = []    # –ö–∞—Å—Ç–æ–º–Ω—ã–π RSI (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è dual mode)
        self.bb_values = []
        self.atr_values = []           # üìä –ó–Ω–∞—á–µ–Ω–∏—è ATR (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
        self.volatility_ratios = []    # üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        
        self.entry_points = []  # (datetime, —Ü–µ–Ω–∞)
        self.exit_points = []   # (datetime, —Ü–µ–Ω–∞)
        self.equity = 1.0
        self.equity_curve = []
        self.trades = []
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        self.cached_closes = []
        self.last_candle_count = 0
        
        # üß† –ù–µ–π—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        self.neural_filter = None
        if use_neural_filter:
            try:
                from neural_filter import NeuralSignalFilter
                self.neural_filter = NeuralSignalFilter()
                print("üß† –ù–µ–π—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: {e}")
                self.use_neural_filter = False
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
        neural_info = " + üß† Neural Filter" if use_neural_filter else ""
        atr_type = "TA-Lib" if TALIB_AVAILABLE else "Custom"
        
        if use_dual_rsi:
            print(f"üìä üèÜ Dual RSI Strategy: TA-Lib Wilder's + Custom SMA-based + {atr_type} ATR{neural_info}")
        elif use_custom_rsi:
            print(f"üìä üèÜ AI-Enhanced Strategy: Custom SMA-based RSI + TA-Lib Bollinger Bands + {atr_type} ATR{neural_info}")
        else:
            rsi_type = "TA-Lib Wilder's" if TALIB_AVAILABLE else "Custom SMA-based (fallback)"
            print(f"üìä Standard Strategy: {rsi_type} RSI + TA-Lib Bollinger Bands + {atr_type} ATR{neural_info}")

    def dt_to_candle_start(self, dt):
        discard = timedelta(minutes=dt.minute % self.candle_minutes,
                            seconds=dt.second,
                            microseconds=dt.microsecond)
        return dt - discard

    def on_tick(self, price, dt, volume=0):
        # --- –°–≤–µ—á–∏ ---
        candle_time = self.dt_to_candle_start(dt)
        candle_closed = False
        
        if self.current_candle is None or candle_time != self.current_candle_time:
            if self.current_candle is not None:
                self.candles.append(self.current_candle)
                candle_closed = True
            self.current_candle = Candle(candle_time)
            self.current_candle_time = candle_time
        self.current_candle.add_tick(price, volume)
        
        # --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ---
        current_candle_count = len(self.candles)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ closes —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if candle_closed or current_candle_count != self.last_candle_count:
            self.cached_closes = [c.close for c in self.candles]
            self.last_candle_count = current_candle_count
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        closes_with_current = self.cached_closes + [self.current_candle.close]
        
        # üèÜ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:
        # - RSI: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (SMA-based)  
        # - Bollinger Bands: –∏—Å–ø–æ–ª—å–∑—É–µ–º TA-Lib (–±—ã—Å—Ç—Ä–µ–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ç –∂–µ)
        
        if self.use_custom_rsi:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π RSI (–≤—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è!)
            rsi = compute_rsi_custom(closes_with_current, period=self.rsi_period)
            rsi_custom = rsi  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        elif self.use_dual_rsi:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ RSI –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            rsi = compute_rsi(closes_with_current, period=self.rsi_period)  # TA-Lib
            rsi_custom = compute_rsi_custom(closes_with_current, period=self.rsi_period)  # –ö–∞—Å—Ç–æ–º–Ω—ã–π
        else:
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É RSI (TA-Lib –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π)
            rsi = compute_rsi(closes_with_current, period=self.rsi_period)
            rsi_custom = rsi  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        # Bollinger Bands –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ TA-Lib (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) - –±—ã—Å—Ç—Ä–µ–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ç –∂–µ
        ma, upper, lower = compute_bollinger_bands(closes_with_current, period=self.bb_period, num_std=self.bb_std)
        
        # üìä –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        atr = compute_atr(self.candles + [self.current_candle], period=14)
        volatility_ratio = compute_volatility_ratio(self.candles + [self.current_candle], atr_period=14, lookback=50)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏
        if candle_closed:
            self.rsi_values.append(rsi)
            self.bb_values.append((ma, upper, lower))
            self.atr_values.append(atr)
            self.volatility_ratios.append(volatility_ratio)
            if self.use_dual_rsi:
                self.rsi_custom_values.append(rsi_custom)
        elif len(self.rsi_values) == len(self.candles):
            # –î–ª—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            self.rsi_values.append(rsi)
            self.bb_values.append((ma, upper, lower))
            self.atr_values.append(atr)
            self.volatility_ratios.append(volatility_ratio)
            if self.use_dual_rsi:
                self.rsi_custom_values.append(rsi_custom)
        # --- –°–∏–≥–Ω–∞–ª—ã ---
        signal = self.position
        candle_dt = self.current_candle.start_time
        candle_close = self.current_candle.close
        
        # üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        neural_approved = True
        neural_confidence = 0.5
        
        if self.use_neural_filter and self.neural_filter and len(self.rsi_values) >= 20:
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
                lookback = min(20, len(self.rsi_values))
                recent_rsi = self.rsi_values[-lookback:]
                recent_bb = self.bb_values[-lookback:]
                recent_atr = self.atr_values[-lookback:]
                recent_vol_ratio = self.volatility_ratios[-lookback:]
                recent_prices = [c.close for c in self.candles[-lookback:]]
                
                features = self.neural_filter.prepare_features(
                    recent_rsi, recent_bb, recent_atr, recent_vol_ratio, recent_prices
                )
                
                if features is not None:
                    neural_approved, neural_confidence = self.neural_filter.should_trade(
                        features, self.neural_confidence_threshold
                    )
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
                neural_approved = True  # Fallback –∫ –æ–±—ã—á–Ω–æ–π –ª–æ–≥–∏–∫–µ
        
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ª–æ–Ω–≥–æ–≤ (—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
        if rsi < self.rsi_buy and self.position == 0 and neural_approved:
            signal = 1  # –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–Ω–≥
            self.entry_points.append((candle_dt, candle_close))
        elif rsi > self.rsi_sell and self.position == 1:
            signal = 0  # –∑–∞–∫—Ä—ã—Ç—å –ª–æ–Ω–≥ (–≤—ã—Ö–æ–¥ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            self.exit_points.append((candle_dt, candle_close))
            
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —à–æ—Ä—Ç–æ–≤ (—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
        elif rsi > self.rsi_sell and self.position == 0 and neural_approved:
            signal = -1  # –æ—Ç–∫—Ä—ã—Ç—å —à–æ—Ä—Ç
            self.entry_points.append((candle_dt, candle_close))
        elif rsi < self.rsi_buy and self.position == -1:
            signal = 0  # –∑–∞–∫—Ä—ã—Ç—å —à–æ—Ä—Ç (–≤—ã—Ö–æ–¥ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            self.exit_points.append((candle_dt, candle_close))
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π (—ç–º—É–ª–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-—Ç–µ—Å—Ç–∞)
        if signal != self.position:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏ —Å—á–∏—Ç–∞–µ–º PnL
            if self.position == 1 and self.last_price is not None:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥
                pnl = (price - self.last_price) / self.last_price
                self.equity *= (1 + pnl)
                self.trades.append(self.equity)
            elif self.position == -1 and self.last_price is not None:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç (–æ–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç PnL)
                pnl = (self.last_price - price) / self.last_price
                self.equity *= (1 + pnl)
                self.trades.append(self.equity)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            if signal == 1 or signal == -1:
                self.last_price = price
            
            self.position = signal
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º equity —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏
        if candle_closed:
            self.equity_curve.append(self.equity)
        elif len(self.equity_curve) == len(self.candles):
            # –î–ª—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            self.equity_curve.append(self.equity)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        return signal

    def on_finish(self, price):
        if self.current_candle is not None:
            self.candles.append(self.current_candle)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ RSI/BB –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            closes = [c.close for c in self.candles]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ on_tick)
            if self.use_custom_rsi:
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π RSI
                rsi = compute_rsi_custom(closes, period=self.rsi_period)
                rsi_custom = rsi
            elif self.use_dual_rsi:
                rsi = compute_rsi(closes, period=self.rsi_period)
                rsi_custom = compute_rsi_custom(closes, period=self.rsi_period)
            else:
                rsi = compute_rsi(closes, period=self.rsi_period)
                rsi_custom = rsi
            
            # Bollinger Bands —á–µ—Ä–µ–∑ TA-Lib (–±—ã—Å—Ç—Ä–µ–µ)
            ma, upper, lower = compute_bollinger_bands(closes, period=self.bb_period, num_std=self.bb_std)
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            if len(self.rsi_values) < len(self.candles):
                self.rsi_values.append(rsi)
                self.bb_values.append((ma, upper, lower))
                if self.use_dual_rsi:
                    self.rsi_custom_values.append(rsi_custom)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª—é–±—É—é –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é
        if self.position == 1 and self.last_price is not None:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥
            pnl = (price - self.last_price) / self.last_price
            self.equity *= (1 + pnl)
            self.trades.append(self.equity)
            self.position = 0
        elif self.position == -1 and self.last_price is not None:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç
            pnl = (self.last_price - price) / self.last_price
            self.equity *= (1 + pnl)
            self.trades.append(self.equity)
            self.position = 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ equity —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if len(self.equity_curve) < len(self.candles):
            self.equity_curve.append(self.equity)

    def sharpe(self):
        returns = np.diff(self.trades)
        if len(returns) == 0:
            return 0.0
        return np.mean(returns) / (np.std(returns) + 1e-8) * np.sqrt(252) 